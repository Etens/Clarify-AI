generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String    @unique
  image           String?
  profileImage    String?
  emailVerified   DateTime?
  language        String?   @default("en")
  createdAt       DateTime  @default(now())
  themePreference Boolean   @default(false)
  accounts        Account[]
  sessions        Session[]
  password        String?
  diagrams        Diagram[] @relation("UserDiagrams")
  views           View[]    @relation("UserViews")
  likes           Like[]    @relation("UserLikes")
  comments        Comment[] @relation("UserComments")
}

model Diagram {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id], name: "UserDiagrams")
  content     Json
  isPublished Boolean   @default(false)
  likes       Int       @default(0)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  tags        String[]
  comments    Comment[] @relation("DiagramComments")
  userViews   View[]    @relation("DiagramViews")
  userLikes   Like[]    @relation("DiagramLikes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  diagramId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserComments")
  diagram   Diagram  @relation(fields: [diagramId], references: [id], name: "DiagramComments")
  content   String
  createdAt DateTime @default(now())
}

model View {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  diagramId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserViews")
  diagram   Diagram  @relation(fields: [diagramId], references: [id], name: "DiagramViews")
  createdAt DateTime @default(now())

  @@unique([userId, diagramId], name: "user_diagram_unique")
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  diagramId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], name: "UserLikes")
  diagram   Diagram @relation(fields: [diagramId], references: [id], name: "DiagramLikes")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  user               User    @relation(fields: [userId], references: [id])
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  type               String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
